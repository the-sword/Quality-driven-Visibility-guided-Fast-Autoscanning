// 包含miveit的API头文件
#include <moveit/move_group_interface/move_group.h>
#include <moveit/planning_scene_interface/planning_scene_interface.h>

#include <moveit_msgs/DisplayRobotState.h>
#include <moveit_msgs/DisplayTrajectory.h>

#include <moveit_msgs/AttachedCollisionObject.h>
#include <moveit_msgs/CollisionObject.h>
#include <stdio.h>
using namespace std;

// 设置机器人终端的目标位置
// 设置机器人终端的目标位置
static geometry_msgs::Pose target_pose_new;
geometry_msgs::PoseStamped  current_pose1;
moveit::planning_interface::MoveGroup::Plan my_plan;

void chatterCallback(const geometry_msgs::Pose& getPose)
{
  //printf current_pose1;
  target_pose_new.orientation.w = getPose.orientation.w;
  target_pose_new.orientation.x= getPose.orientation.x;
  target_pose_new.orientation.y = getPose.orientation.y;
  target_pose_new.orientation.z = getPose.orientation.z;
 
  target_pose_new.position.x = getPose.position.x;
  target_pose_new.position.y = getPose.position.y;
  target_pose_new.position.z = getPose.position.z;
  ROS_INFO_STREAM("target_pose_inner"<<target_pose_new);
}

int main(int argc, char **argv)
{

  ros::init(argc, argv, "pose_listener",ros::init_options::AnonymousName);
  ros::NodeHandle node_handle;  
  ros::Subscriber sub = node_handle.subscribe("/geometry", 10, chatterCallback);
  ros::AsyncSpinner spinner(1);
  spinner.start();


  while(1)
  {
    moveit::planning_interface::MoveGroup group("manipulator");
    //moveit::planning_interface::PlanningSceneInterface planning_scene_interface;
    ROS_INFO("Reference frame: %s", group.getPlanningFrame().c_str());
    ROS_INFO("Reference frame: %s", group.getEndEffectorLink().c_str());
    //
    current_pose1=group.getCurrentPose("ee_link");

    ROS_INFO_STREAM("current_pose1"<<current_pose1);

    //the purpose is if same position,do not plan a new way. BUT now this does not work,
    //
    if((abs(abs(current_pose1.pose.orientation.w)-abs(target_pose_new.orientation.w))<0.01
      &abs(abs(current_pose1.pose.orientation.x)-abs(target_pose_new.orientation.x))<0.01
      &abs(abs(current_pose1.pose.orientation.y)-abs(target_pose_new.orientation.y))<0.01
      &abs(abs(current_pose1.pose.orientation.z)-abs(target_pose_new.orientation.z))<0.01
      &abs(abs(current_pose1.pose.position.x)-abs(target_pose_new.position.x))<0.01
      &abs(abs(current_pose1.pose.position.y)-abs(target_pose_new.position.y))<0.01
      &abs(abs(current_pose1.pose.position.z)-abs(target_pose_new.position.z))<0.01))
    {
        ROS_INFO_STREAM("已达到当前位置");
    }else
    {
      ROS_INFO_STREAM("target_pose_new_outer"<<target_pose_new);

      group.setPlannerId("RRTConnectkConfigDefault");
      
      group.setPoseTarget(target_pose_new);
      group.setGoalTolerance(0.01);
      //ROS_INFO_STREAM("test1");
      // 进行运动规划，计算机器人移动到目标的运动轨迹，此时只是计算出轨迹，并不会控制机械臂运动
      
      //ROS_INFO_STREAM("test2");

      bool success = group.plan(my_plan);
      //ROS_INFO_STREAM("test3");
      
      ROS_INFO("Visualizing plan 1 (pose goal) %s",success?"":"FAILED");   
     
      //让机械臂按照规划的轨迹开始运动。
      if(success)
          group.execute(my_plan);
      group.setStartStateToCurrentState();

      current_pose1=group.getCurrentPose("ee_link");
      ROS_INFO_STREAM("current_pose1"<<current_pose1);
    }

  }
  //ROS_INFO_STREAM_ONCE("This appears only once.");

  //ros::Subscriber sub = node_handle.subscribe("/geometry", 10, chatterCallback);


// END_TUTORIAL
  //ros::spin();
  //ros::shutdown();
  ros::waitForShutdown();
  return 0;
}